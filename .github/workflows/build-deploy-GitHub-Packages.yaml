name: Build and Deploy AJAX Application

on:
  release:
    types: [created]
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      build_deploy_choice:
          description: 'Build, Deploy or Both'
          required: true
          default: 'build_deploy' 
          type: choice
          options:
          - build_only
          - deploy_only
          - build_deploy

jobs:
  build-and-publish:
    runs-on: windows-latest

    env:
      PROJECT_NAME: NetGitHubActions-POC

    if: ${{ github.ref_type == 'tag' }}
    steps:
      - name: Transform Tag
        run: |
          $tag = $env:GITHUB_REF.Replace("refs/tags/", "")
          $nuget_version = $tag -replace '^v(\d+\.\d+\.\d+)(-.+)?$', '$1$2'
          "NUGET_VERSION=$nuget_version" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Print NuGet-Compatible Version
        run: echo "NuGet-Compatible Version:${{ env.NUGET_VERSION }}"

      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup .NET Framework
        uses: actions/setup-dotnet@v1

      - name: Restore NuGet packages
        run: nuget restore ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -PackagesDirectory packages
        env:
          TELERIK_USERNAME: ${{ secrets.MyTelerikAccountUsername }}
          TELERIK_PASSWORD: ${{ secrets.MyTelerikAccountPassword }}
          NUGET_USER: ${{ github.actor }}
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Build the solution
        run: |
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Release
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Debug /p:DebugSymbols=true /p:DebugType=full
        env:
          PROJECT_DIR: ${{ env.PROJECT_NAME }}
          BUILD_CONFIG: Release

      - name: Create releases directory
        run: mkdir releases
        
      - name: Create NuGet package
        id: create-nuget-package
        run: |
            nuget pack ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -Prop Configuration=Release -Version ${{ env.NUGET_VERSION }} -Symbols -SymbolPackageFormat snupkg
            # nuget pack ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -Prop Configuration=Debug -Version ${{ env.NUGET_VERSION }} -Symbols -SymbolPackageFormat snupkg
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).nupkg" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).nupkg"
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).snupkg" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).snupkg"
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).nupkg" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).symbols.nupkg"
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).snupkg" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).symbols.snupkg"
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).nupkg.xml" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).nupkg.xml"
            Copy-Item -Path "$($env:PROJECT_NAME).$($env:NUGET_VERSION).snupkg.xml" -Destination "$($env:GITHUB_WORKSPACE)/releases/$($env:PROJECT_NAME).$($env:NUGET_VERSION).snupkg.xml"
        env:
          BUILD_ARTIFACTS: ${{ env.PROJECT_NAME }}/bin/Release

      - name: Upload Release NuGet package
        # if: github.event_name == 'release'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
          asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
          asset_content_type: application/zip

      - name: Upload Debug NuGet package
        # if: github.event_name == 'release'
        id: upload-debug-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
          asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
          asset_content_type: application/zip

      - name: Publish NuGet package
        if: github.event_name == 'release'
        run: |
          # nuget SetApiKey ${{ secrets.NUGET_API_KEY }}
          nuget push ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg -Source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
           NUGET_USER: ${{ github.actor }}
           NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
