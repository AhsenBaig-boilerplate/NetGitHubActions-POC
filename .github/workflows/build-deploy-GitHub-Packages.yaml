name: Build and Deploy AJAX Application - Nuget (GPR)
run-name: "Deploy to @${{ github.ref_name }} by @${{ github.actor }}"

on:
  release:
    types: [created]
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      build_deploy_choice:
          description: 'Build, Deploy or Both'
          required: true
          default: 'build_deploy' 
          type: choice
          options:
          - build_only
          - deploy_only
          - build_deploy

jobs:
  build-and-publish:
    runs-on: windows-latest

    env:
      PROJECT_NAME: NetGitHubActions-POC
      PROJECT_RELEASES: ${{ github.GITHUB_WORKSPACE }}/releases
      PROJECT_NUGET_PACKAGES: ${{ github.GITHUB_WORKSPACE }}/nuget
      GITHUB_WORKSPACE: ${{ github.GITHUB_WORKSPACE }}      

    if: ${{ github.ref_type == 'tag' }}
    steps:
      - uses: actions/checkout@main # This action checks-out your repository under $GITHUB_WORKSPACE 
      - name: Transform Tag
        run: |
          $tag = $env:GITHUB_REF.Replace("refs/tags/", "")
          $nuget_version = $tag -replace '^v(\d+\.\d+\.\d+)(-.+)?$', '$1$2'
          "NUGET_VERSION=$nuget_version" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Print NuGet-Compatible Version
        run: echo "NuGet-Compatible Version:${{ env.NUGET_VERSION }}"
        
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup .NET Framework
        uses: actions/setup-dotnet@v1

      - name: Restore NuGet packages
        run: nuget restore ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -PackagesDirectory packages
        env:
          TELERIK_USERNAME: ${{ secrets.TELERIK_NUGET_USER }}
          TELERIK_PASSWORD: ${{ secrets.TELERIK_NUGET_KEY }}
          NUGET_USER: ${{ github.actor }}
          NUGET_API_KEY: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the solution
        run: |
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Release
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Debug /p:DebugSymbols=true /p:DebugType=full
        env:
          PROJECT_DIR: ${{ env.PROJECT_NAME }}
          BUILD_CONFIG: Release

      - name: Create releases and nuget directory
        run: |
          mkdir ${{ env.GITHUB_WORKSPACE }}/releases
          mkdir ${{ env.GITHUB_WORKSPACE }}/nuget
      
      # - name: Cache NuGet packages
      #   id: cache-nuget-packages
      #   uses: actions/cache@main
      #   with:
      #     path: '**/packages.lock.json'
      #     key: nuget-packages-${{ hashFiles('**/packages.lock.json') }}
      #     restore-keys: nuget-packages-
        
      - name: Create NuGet package
        id: create-nuget-package
        run: |
            nuget pack ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -Prop Configuration=Release -Version ${{ env.NUGET_VERSION }} -Symbols -SymbolPackageFormat snupkg
            # -OutputDirectory "${{ env.GITHUB_WORKSPACE }}/nuget" # If OutputDirectory is defined then it gets all the referenced external .nupkg as well.
      - name: Copy workspace Nuget packages to PROJECT_NUGET_PACKAGES 
        id: copy-github-workspace-items-nuget-directory
        run: |
            Get-ChildItem -Path "${{ env.GITHUB_WORKSPACE }}" -Include *.nupkg, *.snupkg -Recurse | Where-Object { $_.FullName -notmatch 'packages' } | ForEach-Object {              
              Copy-Item -Path $_.FullName -Destination "${{ env.PROJECT_NUGET_PACKAGES }}" -Verbose â€“PassThru | ForEach-Object { Write-Host $_.FullName }
            }                       
        env:
          GITHUB_WORKSPACE: ${{ github.GITHUB_WORKSPACE }}
          PROJECT_NUGET_PACKAGES: ${{ github.GITHUB_WORKSPACE }}/nuget
          
      - name: List out GITHUB_WORKSPACE packages list packages
        id: github-workspace-nuget-packages-list
        run: |
            echo "env.GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }} "

            Get-ChildItem -Path "${{ env.GITHUB_WORKSPACE }}" -Include *.nupkg, *.snupkg -Recurse | Where-Object { $_.FullName -notmatch 'packages' } | ForEach-Object {
              ls -Path $_.FullName
            }
            
            echo "env.PROJECT_NUGET_PACKAGES: ${{ env.PROJECT_NUGET_PACKAGES }} "
            Get-ChildItem -Path "${{ env.PROJECT_NUGET_PACKAGES }}" -Recurse | Where-Object { $_.FullName -notmatch 'packages' } | ForEach-Object { 
              ls -Path $_.FullName
            }
        env:
          GITHUB_WORKSPACE: ${{ github.GITHUB_WORKSPACE }}
          PROJECT_NUGET_PACKAGES: ${{ github.GITHUB_WORKSPACE }}/nuget
      
      # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          if-no-files-found: error
          # retention-days: 7
          path: |
            ${{ env.PROJECT_NUGET_PACKAGES }}/*.nupkg
            ${{ env.PROJECT_NUGET_PACKAGES }}/*.snupkg

      - name: Upload Release NuGet package
        # if: github.event_name == 'release'
        id: upload-release-asset
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PROJECT_NUGET_PACKAGES }}/${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
          asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
          asset_content_type: application/zip

      - name: Upload Debug NuGet package
        # if: github.event_name == 'release'
        id: upload-debug-asset
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PROJECT_NUGET_PACKAGES }}/${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
          asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
          asset_content_type: application/zip

  push_nuget:
    runs-on: windows-latest
    needs: [ build-and-publish ]
    steps:
       # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget-packages
          path:  ${{ env.PROJECT_NUGET_PACKAGES }}
      
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package  
        run: |
          echo "env.GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }} "

          # Get-ChildItem -Path "${{ env.GITHUB_WORKSPACE }}" -Include *.nupkg, *.snupkg -Recurse | Where-Object { $_.FullName -notmatch 'packages' } | ForEach-Object {
          #   ls -Path $_.FullName
          # }
          
          foreach($file in (Get-ChildItem "${{ env.GITHUB_WORKSPACE }}" -Include *.nupkg,*.snupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.GITHUB_TOKEN }}" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          }
