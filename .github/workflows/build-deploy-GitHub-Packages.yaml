name: Build and Deploy AJAX Application - Nuget (GPR)
run-name: "Deploy to @${{ github.ref_name }} by @${{ github.actor }}"

on:
  release:
    types: [created]
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      build_deploy_choice:
          description: 'Build, Deploy or Both'
          required: true
          default: 'build_deploy' 
          type: choice
          options:
          - build_only
          - deploy_only
          - build_deploy

jobs:
  build-and-publish:
    runs-on: windows-latest

    env:
      PROJECT_NAME: NetGitHubActions-POC
      PROJECT_RELEASES: ${{ github.GITHUB_WORKSPACE }}/releases
      NUGET_PACKAGES: ${{ github.GITHUB_WORKSPACE }}/nuget

    if: ${{ github.ref_type == 'tag' }}
    steps:
      - name: Transform Tag
        run: |
          $tag = $env:GITHUB_REF.Replace("refs/tags/", "")
          $nuget_version = $tag -replace '^v(\d+\.\d+\.\d+)(-.+)?$', '$1$2'
          "NUGET_VERSION=$nuget_version" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Print NuGet-Compatible Version
        run: echo "NuGet-Compatible Version:${{ env.NUGET_VERSION }}"

      - name: Checkout repository
        uses: actions/checkout@main
        
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup .NET Framework
        uses: actions/setup-dotnet@v1

      - name: Restore NuGet packages
        run: nuget restore ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -PackagesDirectory packages
        env:
          TELERIK_USERNAME: ${{ secrets.TELERIK_NUGET_USER }}
          TELERIK_PASSWORD: ${{ secrets.TELERIK_NUGET_KEY }}
          NUGET_USER: ${{ github.actor }}
          NUGET_API_KEY: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the solution
        run: |
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Release
            msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Debug /p:DebugSymbols=true /p:DebugType=full
        env:
          PROJECT_DIR: ${{ env.PROJECT_NAME }}
          BUILD_CONFIG: Release

      - name: List out build NUGET_PACKAGES packages
        id: build-nuget-packages-list
        run: |
            echo "env.NUGET_PACKAGES"

            Get-ChildItem -Path "${{ env.PROJECT_NAME }}" -Include *.nupkg, *.snupkg -Recurse | ForEach-Object {
              ls -Path $_.FullName
            }

      - name: Create releases directory
        run: |
          mkdir releases
          mkdir nuget
        
      - name: Create NuGet package
        id: create-nuget-package
        run: |
            nuget pack ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -Prop Configuration=Release -Version ${{ env.NUGET_VERSION }} -Symbols -SymbolPackageFormat snupkg
            # -OutputDirectory "${{ github.GITHUB_WORKSPACE }}/nuget"
  
      - name: List GITHUB_WORKSPACE files
        id: github-workspace-files-list
        run: |
            echo "env.GITHUB_WORKSPACE"

            Get-ChildItem -Path "${{ env.GITHUB_WORKSPACE }}" -Recurse | ForEach-Object {
              ls -Path $_.FullName
            }

      - name: List out NUGET_PACKAGES packages
        id: nuget-packages-list
        run: |
            echo "env.NUGET_PACKAGES"

            Get-ChildItem -Path "${{ env.NUGET_PACKAGES }}" -Include *.nupkg, *.snupkg -Recurse | ForEach-Object {
              ls -Path $_.FullName
            }
    
  #     - name: Upload Release NuGet package
  #       # if: github.event_name == 'release'
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@main
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
  #         asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.nupkg
  #         asset_content_type: application/zip

  #     - name: Upload Debug NuGet package
  #       # if: github.event_name == 'release'
  #       id: upload-debug-asset
  #       uses: actions/upload-release-asset@main
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
  #         asset_name: ${{ env.PROJECT_NAME }}.${{ env.NUGET_VERSION }}.snupkg
  #         asset_content_type: application/zip
          
  #     - name: Copy Nuget packages to ${{ env.NuGetDirectory }}
  #       id: copy-items-nuget-directory
  #       run: |
  #         # Put to ${{ github.workspace}}/nuget
  #         Get-ChildItem -Path "$($env.GITHUB_WORKSPACE)/releases" -Include *.nupkg,*.snupkg -Recurse | ForEach-Object { 
  #             Copy-Item -Path $_.FullName -Destination ${{ env.NuGetDirectory}}
  #         }
  #     # Publish the NuGet package as an artifact, so they can be used in the following jobs
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: nuget
  #         if-no-files-found: error
  #         retention-days: 7
  #         path: |
  #           ${{ env.NuGetDirectory }}/*.nupkg
  #           ${{ env.NuGetDirectory }}/*.snupkg

  # push_nuget:
  #   runs-on: ubuntu-latest
  #   needs: [ build-and-publish ]
  #   steps:
  #      # Download the NuGet package created in the previous job
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: nuget
  #         path: ${{ env.NuGetDirectory }}
      
  #     # Install the .NET SDK indicated in the global.json file
  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v3

  #     # Publish all NuGet packages to NuGet.org
  #     # Use --skip-duplicate to prevent errors if a package with the same version already exists.
  #     # If you retry a failed workflow, already published packages will be skipped without error.
  #     - name: Publish NuGet package
  #       run: |
  #         foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
  #             dotnet nuget push $file --api-key "${{ secrets.GITHUB_TOKEN }}" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
  #         }
